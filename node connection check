class dfs():
    dfsarray=[]
    stack=[]
    def __init__(self,start,end,graph_dict):
        self.start = start
        self.end = end
        self.graph_dict = graph_dict
    def if_node_is_already_checked(self,start):
        if start not in self.dfsarray:return start
    def main(self):
        stack=0
        self.stack.append(self.start)
        self.dfsarray.append(start)
        while len(self.dfsarray) <= 8:
            if stack == None:break
            else:
                value = self.graph_dict[self.start]
                le=len(value)
                leng=le-1
                for l in range(le):
                    v=self.if_node_is_already_checked(value[l])
                    if v != None:
                        self.dfsarray.append(v)
                        self.stack.append(v)
                        self.start=v
                        break
                    elif l == leng and v ==None:
                        self.stack.pop()
                        var=len(self.stack)
                        var=var-1
                        if var <0:stack= None
                        else:self.start=self.stack[var]
        if self.end in self.dfsarray:print("connected")
        else:print("notconnected")
start=7
end=9
graph_dict={1: [2], 2: [6, 7, 3, 1], 3: [4, 2, 5], 4: [2, 5, 3], 5: [3, 4], 6: [2], 7: [2], 8: [9],9: [8]}
z=dfs(start,end,graph_dict)
r=z.main() 
